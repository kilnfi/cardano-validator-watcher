// Code generated by mockery v2.53.2. DO NOT EDIT.

package blockfrost

import (
	blockfrost_go "github.com/blockfrost/blockfrost-go"
	blockfrost "github.com/kilnfi/cardano-validator-watcher/internal/blockfrost"

	context "context"

	mock "github.com/stretchr/testify/mock"
)

// MockClient is an autogenerated mock type for the Client type
type MockClient struct {
	mock.Mock
}

type MockClient_Expecter struct {
	mock *mock.Mock
}

func (_m *MockClient) EXPECT() *MockClient_Expecter {
	return &MockClient_Expecter{mock: &_m.Mock}
}

// GetAccountInfo provides a mock function with given fields: ctx, stakeAddress
func (_m *MockClient) GetAccountInfo(ctx context.Context, stakeAddress string) (blockfrost.Account, error) {
	ret := _m.Called(ctx, stakeAddress)

	if len(ret) == 0 {
		panic("no return value specified for GetAccountInfo")
	}

	var r0 blockfrost.Account
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (blockfrost.Account, error)); ok {
		return rf(ctx, stakeAddress)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) blockfrost.Account); ok {
		r0 = rf(ctx, stakeAddress)
	} else {
		r0 = ret.Get(0).(blockfrost.Account)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, stakeAddress)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClient_GetAccountInfo_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAccountInfo'
type MockClient_GetAccountInfo_Call struct {
	*mock.Call
}

// GetAccountInfo is a helper method to define mock.On call
//   - ctx context.Context
//   - stakeAddress string
func (_e *MockClient_Expecter) GetAccountInfo(ctx interface{}, stakeAddress interface{}) *MockClient_GetAccountInfo_Call {
	return &MockClient_GetAccountInfo_Call{Call: _e.mock.On("GetAccountInfo", ctx, stakeAddress)}
}

func (_c *MockClient_GetAccountInfo_Call) Run(run func(ctx context.Context, stakeAddress string)) *MockClient_GetAccountInfo_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockClient_GetAccountInfo_Call) Return(_a0 blockfrost.Account, _a1 error) *MockClient_GetAccountInfo_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClient_GetAccountInfo_Call) RunAndReturn(run func(context.Context, string) (blockfrost.Account, error)) *MockClient_GetAccountInfo_Call {
	_c.Call.Return(run)
	return _c
}

// GetAllPools provides a mock function with given fields: ctx
func (_m *MockClient) GetAllPools(ctx context.Context) ([]string, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetAllPools")
	}

	var r0 []string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]string, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []string); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClient_GetAllPools_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAllPools'
type MockClient_GetAllPools_Call struct {
	*mock.Call
}

// GetAllPools is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockClient_Expecter) GetAllPools(ctx interface{}) *MockClient_GetAllPools_Call {
	return &MockClient_GetAllPools_Call{Call: _e.mock.On("GetAllPools", ctx)}
}

func (_c *MockClient_GetAllPools_Call) Run(run func(ctx context.Context)) *MockClient_GetAllPools_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockClient_GetAllPools_Call) Return(_a0 []string, _a1 error) *MockClient_GetAllPools_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClient_GetAllPools_Call) RunAndReturn(run func(context.Context) ([]string, error)) *MockClient_GetAllPools_Call {
	_c.Call.Return(run)
	return _c
}

// GetBlockBySlot provides a mock function with given fields: ctx, slot
func (_m *MockClient) GetBlockBySlot(ctx context.Context, slot int) (blockfrost_go.Block, error) {
	ret := _m.Called(ctx, slot)

	if len(ret) == 0 {
		panic("no return value specified for GetBlockBySlot")
	}

	var r0 blockfrost_go.Block
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int) (blockfrost_go.Block, error)); ok {
		return rf(ctx, slot)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int) blockfrost_go.Block); ok {
		r0 = rf(ctx, slot)
	} else {
		r0 = ret.Get(0).(blockfrost_go.Block)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(ctx, slot)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClient_GetBlockBySlot_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetBlockBySlot'
type MockClient_GetBlockBySlot_Call struct {
	*mock.Call
}

// GetBlockBySlot is a helper method to define mock.On call
//   - ctx context.Context
//   - slot int
func (_e *MockClient_Expecter) GetBlockBySlot(ctx interface{}, slot interface{}) *MockClient_GetBlockBySlot_Call {
	return &MockClient_GetBlockBySlot_Call{Call: _e.mock.On("GetBlockBySlot", ctx, slot)}
}

func (_c *MockClient_GetBlockBySlot_Call) Run(run func(ctx context.Context, slot int)) *MockClient_GetBlockBySlot_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int))
	})
	return _c
}

func (_c *MockClient_GetBlockBySlot_Call) Return(_a0 blockfrost_go.Block, _a1 error) *MockClient_GetBlockBySlot_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClient_GetBlockBySlot_Call) RunAndReturn(run func(context.Context, int) (blockfrost_go.Block, error)) *MockClient_GetBlockBySlot_Call {
	_c.Call.Return(run)
	return _c
}

// GetBlockBySlotAndEpoch provides a mock function with given fields: ctx, epoch, slot
func (_m *MockClient) GetBlockBySlotAndEpoch(ctx context.Context, epoch int, slot int) (blockfrost_go.Block, error) {
	ret := _m.Called(ctx, epoch, slot)

	if len(ret) == 0 {
		panic("no return value specified for GetBlockBySlotAndEpoch")
	}

	var r0 blockfrost_go.Block
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int, int) (blockfrost_go.Block, error)); ok {
		return rf(ctx, epoch, slot)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int, int) blockfrost_go.Block); ok {
		r0 = rf(ctx, epoch, slot)
	} else {
		r0 = ret.Get(0).(blockfrost_go.Block)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int, int) error); ok {
		r1 = rf(ctx, epoch, slot)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClient_GetBlockBySlotAndEpoch_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetBlockBySlotAndEpoch'
type MockClient_GetBlockBySlotAndEpoch_Call struct {
	*mock.Call
}

// GetBlockBySlotAndEpoch is a helper method to define mock.On call
//   - ctx context.Context
//   - epoch int
//   - slot int
func (_e *MockClient_Expecter) GetBlockBySlotAndEpoch(ctx interface{}, epoch interface{}, slot interface{}) *MockClient_GetBlockBySlotAndEpoch_Call {
	return &MockClient_GetBlockBySlotAndEpoch_Call{Call: _e.mock.On("GetBlockBySlotAndEpoch", ctx, epoch, slot)}
}

func (_c *MockClient_GetBlockBySlotAndEpoch_Call) Run(run func(ctx context.Context, epoch int, slot int)) *MockClient_GetBlockBySlotAndEpoch_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int), args[2].(int))
	})
	return _c
}

func (_c *MockClient_GetBlockBySlotAndEpoch_Call) Return(_a0 blockfrost_go.Block, _a1 error) *MockClient_GetBlockBySlotAndEpoch_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClient_GetBlockBySlotAndEpoch_Call) RunAndReturn(run func(context.Context, int, int) (blockfrost_go.Block, error)) *MockClient_GetBlockBySlotAndEpoch_Call {
	_c.Call.Return(run)
	return _c
}

// GetBlockDistributionByPool provides a mock function with given fields: ctx, epoch, PoolID
func (_m *MockClient) GetBlockDistributionByPool(ctx context.Context, epoch int, PoolID string) ([]string, error) {
	ret := _m.Called(ctx, epoch, PoolID)

	if len(ret) == 0 {
		panic("no return value specified for GetBlockDistributionByPool")
	}

	var r0 []string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int, string) ([]string, error)); ok {
		return rf(ctx, epoch, PoolID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int, string) []string); ok {
		r0 = rf(ctx, epoch, PoolID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int, string) error); ok {
		r1 = rf(ctx, epoch, PoolID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClient_GetBlockDistributionByPool_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetBlockDistributionByPool'
type MockClient_GetBlockDistributionByPool_Call struct {
	*mock.Call
}

// GetBlockDistributionByPool is a helper method to define mock.On call
//   - ctx context.Context
//   - epoch int
//   - PoolID string
func (_e *MockClient_Expecter) GetBlockDistributionByPool(ctx interface{}, epoch interface{}, PoolID interface{}) *MockClient_GetBlockDistributionByPool_Call {
	return &MockClient_GetBlockDistributionByPool_Call{Call: _e.mock.On("GetBlockDistributionByPool", ctx, epoch, PoolID)}
}

func (_c *MockClient_GetBlockDistributionByPool_Call) Run(run func(ctx context.Context, epoch int, PoolID string)) *MockClient_GetBlockDistributionByPool_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int), args[2].(string))
	})
	return _c
}

func (_c *MockClient_GetBlockDistributionByPool_Call) Return(_a0 []string, _a1 error) *MockClient_GetBlockDistributionByPool_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClient_GetBlockDistributionByPool_Call) RunAndReturn(run func(context.Context, int, string) ([]string, error)) *MockClient_GetBlockDistributionByPool_Call {
	_c.Call.Return(run)
	return _c
}

// GetEpochParameters provides a mock function with given fields: ctx, epoch
func (_m *MockClient) GetEpochParameters(ctx context.Context, epoch int) (blockfrost_go.EpochParameters, error) {
	ret := _m.Called(ctx, epoch)

	if len(ret) == 0 {
		panic("no return value specified for GetEpochParameters")
	}

	var r0 blockfrost_go.EpochParameters
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int) (blockfrost_go.EpochParameters, error)); ok {
		return rf(ctx, epoch)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int) blockfrost_go.EpochParameters); ok {
		r0 = rf(ctx, epoch)
	} else {
		r0 = ret.Get(0).(blockfrost_go.EpochParameters)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(ctx, epoch)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClient_GetEpochParameters_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetEpochParameters'
type MockClient_GetEpochParameters_Call struct {
	*mock.Call
}

// GetEpochParameters is a helper method to define mock.On call
//   - ctx context.Context
//   - epoch int
func (_e *MockClient_Expecter) GetEpochParameters(ctx interface{}, epoch interface{}) *MockClient_GetEpochParameters_Call {
	return &MockClient_GetEpochParameters_Call{Call: _e.mock.On("GetEpochParameters", ctx, epoch)}
}

func (_c *MockClient_GetEpochParameters_Call) Run(run func(ctx context.Context, epoch int)) *MockClient_GetEpochParameters_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int))
	})
	return _c
}

func (_c *MockClient_GetEpochParameters_Call) Return(_a0 blockfrost_go.EpochParameters, _a1 error) *MockClient_GetEpochParameters_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClient_GetEpochParameters_Call) RunAndReturn(run func(context.Context, int) (blockfrost_go.EpochParameters, error)) *MockClient_GetEpochParameters_Call {
	_c.Call.Return(run)
	return _c
}

// GetFirstBlockInEpoch provides a mock function with given fields: ctx, epoch
func (_m *MockClient) GetFirstBlockInEpoch(ctx context.Context, epoch int) (blockfrost_go.Block, error) {
	ret := _m.Called(ctx, epoch)

	if len(ret) == 0 {
		panic("no return value specified for GetFirstBlockInEpoch")
	}

	var r0 blockfrost_go.Block
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int) (blockfrost_go.Block, error)); ok {
		return rf(ctx, epoch)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int) blockfrost_go.Block); ok {
		r0 = rf(ctx, epoch)
	} else {
		r0 = ret.Get(0).(blockfrost_go.Block)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(ctx, epoch)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClient_GetFirstBlockInEpoch_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetFirstBlockInEpoch'
type MockClient_GetFirstBlockInEpoch_Call struct {
	*mock.Call
}

// GetFirstBlockInEpoch is a helper method to define mock.On call
//   - ctx context.Context
//   - epoch int
func (_e *MockClient_Expecter) GetFirstBlockInEpoch(ctx interface{}, epoch interface{}) *MockClient_GetFirstBlockInEpoch_Call {
	return &MockClient_GetFirstBlockInEpoch_Call{Call: _e.mock.On("GetFirstBlockInEpoch", ctx, epoch)}
}

func (_c *MockClient_GetFirstBlockInEpoch_Call) Run(run func(ctx context.Context, epoch int)) *MockClient_GetFirstBlockInEpoch_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int))
	})
	return _c
}

func (_c *MockClient_GetFirstBlockInEpoch_Call) Return(_a0 blockfrost_go.Block, _a1 error) *MockClient_GetFirstBlockInEpoch_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClient_GetFirstBlockInEpoch_Call) RunAndReturn(run func(context.Context, int) (blockfrost_go.Block, error)) *MockClient_GetFirstBlockInEpoch_Call {
	_c.Call.Return(run)
	return _c
}

// GetFirstSlotInEpoch provides a mock function with given fields: ctx, epoch
func (_m *MockClient) GetFirstSlotInEpoch(ctx context.Context, epoch int) (int, error) {
	ret := _m.Called(ctx, epoch)

	if len(ret) == 0 {
		panic("no return value specified for GetFirstSlotInEpoch")
	}

	var r0 int
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int) (int, error)); ok {
		return rf(ctx, epoch)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int) int); ok {
		r0 = rf(ctx, epoch)
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(ctx, epoch)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClient_GetFirstSlotInEpoch_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetFirstSlotInEpoch'
type MockClient_GetFirstSlotInEpoch_Call struct {
	*mock.Call
}

// GetFirstSlotInEpoch is a helper method to define mock.On call
//   - ctx context.Context
//   - epoch int
func (_e *MockClient_Expecter) GetFirstSlotInEpoch(ctx interface{}, epoch interface{}) *MockClient_GetFirstSlotInEpoch_Call {
	return &MockClient_GetFirstSlotInEpoch_Call{Call: _e.mock.On("GetFirstSlotInEpoch", ctx, epoch)}
}

func (_c *MockClient_GetFirstSlotInEpoch_Call) Run(run func(ctx context.Context, epoch int)) *MockClient_GetFirstSlotInEpoch_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int))
	})
	return _c
}

func (_c *MockClient_GetFirstSlotInEpoch_Call) Return(_a0 int, _a1 error) *MockClient_GetFirstSlotInEpoch_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClient_GetFirstSlotInEpoch_Call) RunAndReturn(run func(context.Context, int) (int, error)) *MockClient_GetFirstSlotInEpoch_Call {
	_c.Call.Return(run)
	return _c
}

// GetGenesisInfo provides a mock function with given fields: ctx
func (_m *MockClient) GetGenesisInfo(ctx context.Context) (blockfrost_go.GenesisBlock, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetGenesisInfo")
	}

	var r0 blockfrost_go.GenesisBlock
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (blockfrost_go.GenesisBlock, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) blockfrost_go.GenesisBlock); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(blockfrost_go.GenesisBlock)
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClient_GetGenesisInfo_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetGenesisInfo'
type MockClient_GetGenesisInfo_Call struct {
	*mock.Call
}

// GetGenesisInfo is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockClient_Expecter) GetGenesisInfo(ctx interface{}) *MockClient_GetGenesisInfo_Call {
	return &MockClient_GetGenesisInfo_Call{Call: _e.mock.On("GetGenesisInfo", ctx)}
}

func (_c *MockClient_GetGenesisInfo_Call) Run(run func(ctx context.Context)) *MockClient_GetGenesisInfo_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockClient_GetGenesisInfo_Call) Return(_a0 blockfrost_go.GenesisBlock, _a1 error) *MockClient_GetGenesisInfo_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClient_GetGenesisInfo_Call) RunAndReturn(run func(context.Context) (blockfrost_go.GenesisBlock, error)) *MockClient_GetGenesisInfo_Call {
	_c.Call.Return(run)
	return _c
}

// GetLastBlockFromPreviousEpoch provides a mock function with given fields: ctx, prevEpoch
func (_m *MockClient) GetLastBlockFromPreviousEpoch(ctx context.Context, prevEpoch int) (blockfrost_go.Block, error) {
	ret := _m.Called(ctx, prevEpoch)

	if len(ret) == 0 {
		panic("no return value specified for GetLastBlockFromPreviousEpoch")
	}

	var r0 blockfrost_go.Block
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int) (blockfrost_go.Block, error)); ok {
		return rf(ctx, prevEpoch)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int) blockfrost_go.Block); ok {
		r0 = rf(ctx, prevEpoch)
	} else {
		r0 = ret.Get(0).(blockfrost_go.Block)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(ctx, prevEpoch)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClient_GetLastBlockFromPreviousEpoch_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetLastBlockFromPreviousEpoch'
type MockClient_GetLastBlockFromPreviousEpoch_Call struct {
	*mock.Call
}

// GetLastBlockFromPreviousEpoch is a helper method to define mock.On call
//   - ctx context.Context
//   - prevEpoch int
func (_e *MockClient_Expecter) GetLastBlockFromPreviousEpoch(ctx interface{}, prevEpoch interface{}) *MockClient_GetLastBlockFromPreviousEpoch_Call {
	return &MockClient_GetLastBlockFromPreviousEpoch_Call{Call: _e.mock.On("GetLastBlockFromPreviousEpoch", ctx, prevEpoch)}
}

func (_c *MockClient_GetLastBlockFromPreviousEpoch_Call) Run(run func(ctx context.Context, prevEpoch int)) *MockClient_GetLastBlockFromPreviousEpoch_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int))
	})
	return _c
}

func (_c *MockClient_GetLastBlockFromPreviousEpoch_Call) Return(_a0 blockfrost_go.Block, _a1 error) *MockClient_GetLastBlockFromPreviousEpoch_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClient_GetLastBlockFromPreviousEpoch_Call) RunAndReturn(run func(context.Context, int) (blockfrost_go.Block, error)) *MockClient_GetLastBlockFromPreviousEpoch_Call {
	_c.Call.Return(run)
	return _c
}

// GetLatestBlock provides a mock function with given fields: ctx
func (_m *MockClient) GetLatestBlock(ctx context.Context) (blockfrost_go.Block, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetLatestBlock")
	}

	var r0 blockfrost_go.Block
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (blockfrost_go.Block, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) blockfrost_go.Block); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(blockfrost_go.Block)
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClient_GetLatestBlock_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetLatestBlock'
type MockClient_GetLatestBlock_Call struct {
	*mock.Call
}

// GetLatestBlock is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockClient_Expecter) GetLatestBlock(ctx interface{}) *MockClient_GetLatestBlock_Call {
	return &MockClient_GetLatestBlock_Call{Call: _e.mock.On("GetLatestBlock", ctx)}
}

func (_c *MockClient_GetLatestBlock_Call) Run(run func(ctx context.Context)) *MockClient_GetLatestBlock_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockClient_GetLatestBlock_Call) Return(_a0 blockfrost_go.Block, _a1 error) *MockClient_GetLatestBlock_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClient_GetLatestBlock_Call) RunAndReturn(run func(context.Context) (blockfrost_go.Block, error)) *MockClient_GetLatestBlock_Call {
	_c.Call.Return(run)
	return _c
}

// GetLatestEpoch provides a mock function with given fields: ctx
func (_m *MockClient) GetLatestEpoch(ctx context.Context) (blockfrost_go.Epoch, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetLatestEpoch")
	}

	var r0 blockfrost_go.Epoch
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (blockfrost_go.Epoch, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) blockfrost_go.Epoch); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(blockfrost_go.Epoch)
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClient_GetLatestEpoch_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetLatestEpoch'
type MockClient_GetLatestEpoch_Call struct {
	*mock.Call
}

// GetLatestEpoch is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockClient_Expecter) GetLatestEpoch(ctx interface{}) *MockClient_GetLatestEpoch_Call {
	return &MockClient_GetLatestEpoch_Call{Call: _e.mock.On("GetLatestEpoch", ctx)}
}

func (_c *MockClient_GetLatestEpoch_Call) Run(run func(ctx context.Context)) *MockClient_GetLatestEpoch_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockClient_GetLatestEpoch_Call) Return(_a0 blockfrost_go.Epoch, _a1 error) *MockClient_GetLatestEpoch_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClient_GetLatestEpoch_Call) RunAndReturn(run func(context.Context) (blockfrost_go.Epoch, error)) *MockClient_GetLatestEpoch_Call {
	_c.Call.Return(run)
	return _c
}

// GetNetworkInfo provides a mock function with given fields: ctx
func (_m *MockClient) GetNetworkInfo(ctx context.Context) (blockfrost_go.NetworkInfo, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetNetworkInfo")
	}

	var r0 blockfrost_go.NetworkInfo
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (blockfrost_go.NetworkInfo, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) blockfrost_go.NetworkInfo); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(blockfrost_go.NetworkInfo)
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClient_GetNetworkInfo_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetNetworkInfo'
type MockClient_GetNetworkInfo_Call struct {
	*mock.Call
}

// GetNetworkInfo is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockClient_Expecter) GetNetworkInfo(ctx interface{}) *MockClient_GetNetworkInfo_Call {
	return &MockClient_GetNetworkInfo_Call{Call: _e.mock.On("GetNetworkInfo", ctx)}
}

func (_c *MockClient_GetNetworkInfo_Call) Run(run func(ctx context.Context)) *MockClient_GetNetworkInfo_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockClient_GetNetworkInfo_Call) Return(_a0 blockfrost_go.NetworkInfo, _a1 error) *MockClient_GetNetworkInfo_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClient_GetNetworkInfo_Call) RunAndReturn(run func(context.Context) (blockfrost_go.NetworkInfo, error)) *MockClient_GetNetworkInfo_Call {
	_c.Call.Return(run)
	return _c
}

// GetPoolInfo provides a mock function with given fields: ctx, PoolID
func (_m *MockClient) GetPoolInfo(ctx context.Context, PoolID string) (blockfrost_go.Pool, error) {
	ret := _m.Called(ctx, PoolID)

	if len(ret) == 0 {
		panic("no return value specified for GetPoolInfo")
	}

	var r0 blockfrost_go.Pool
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (blockfrost_go.Pool, error)); ok {
		return rf(ctx, PoolID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) blockfrost_go.Pool); ok {
		r0 = rf(ctx, PoolID)
	} else {
		r0 = ret.Get(0).(blockfrost_go.Pool)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, PoolID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClient_GetPoolInfo_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPoolInfo'
type MockClient_GetPoolInfo_Call struct {
	*mock.Call
}

// GetPoolInfo is a helper method to define mock.On call
//   - ctx context.Context
//   - PoolID string
func (_e *MockClient_Expecter) GetPoolInfo(ctx interface{}, PoolID interface{}) *MockClient_GetPoolInfo_Call {
	return &MockClient_GetPoolInfo_Call{Call: _e.mock.On("GetPoolInfo", ctx, PoolID)}
}

func (_c *MockClient_GetPoolInfo_Call) Run(run func(ctx context.Context, PoolID string)) *MockClient_GetPoolInfo_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockClient_GetPoolInfo_Call) Return(_a0 blockfrost_go.Pool, _a1 error) *MockClient_GetPoolInfo_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClient_GetPoolInfo_Call) RunAndReturn(run func(context.Context, string) (blockfrost_go.Pool, error)) *MockClient_GetPoolInfo_Call {
	_c.Call.Return(run)
	return _c
}

// GetPoolMetadata provides a mock function with given fields: ctx, PoolID
func (_m *MockClient) GetPoolMetadata(ctx context.Context, PoolID string) (blockfrost_go.PoolMetadata, error) {
	ret := _m.Called(ctx, PoolID)

	if len(ret) == 0 {
		panic("no return value specified for GetPoolMetadata")
	}

	var r0 blockfrost_go.PoolMetadata
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (blockfrost_go.PoolMetadata, error)); ok {
		return rf(ctx, PoolID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) blockfrost_go.PoolMetadata); ok {
		r0 = rf(ctx, PoolID)
	} else {
		r0 = ret.Get(0).(blockfrost_go.PoolMetadata)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, PoolID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClient_GetPoolMetadata_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPoolMetadata'
type MockClient_GetPoolMetadata_Call struct {
	*mock.Call
}

// GetPoolMetadata is a helper method to define mock.On call
//   - ctx context.Context
//   - PoolID string
func (_e *MockClient_Expecter) GetPoolMetadata(ctx interface{}, PoolID interface{}) *MockClient_GetPoolMetadata_Call {
	return &MockClient_GetPoolMetadata_Call{Call: _e.mock.On("GetPoolMetadata", ctx, PoolID)}
}

func (_c *MockClient_GetPoolMetadata_Call) Run(run func(ctx context.Context, PoolID string)) *MockClient_GetPoolMetadata_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockClient_GetPoolMetadata_Call) Return(_a0 blockfrost_go.PoolMetadata, _a1 error) *MockClient_GetPoolMetadata_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClient_GetPoolMetadata_Call) RunAndReturn(run func(context.Context, string) (blockfrost_go.PoolMetadata, error)) *MockClient_GetPoolMetadata_Call {
	_c.Call.Return(run)
	return _c
}

// GetPoolRelays provides a mock function with given fields: ctx, PoolID
func (_m *MockClient) GetPoolRelays(ctx context.Context, PoolID string) ([]blockfrost_go.PoolRelay, error) {
	ret := _m.Called(ctx, PoolID)

	if len(ret) == 0 {
		panic("no return value specified for GetPoolRelays")
	}

	var r0 []blockfrost_go.PoolRelay
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) ([]blockfrost_go.PoolRelay, error)); ok {
		return rf(ctx, PoolID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) []blockfrost_go.PoolRelay); ok {
		r0 = rf(ctx, PoolID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]blockfrost_go.PoolRelay)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, PoolID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClient_GetPoolRelays_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPoolRelays'
type MockClient_GetPoolRelays_Call struct {
	*mock.Call
}

// GetPoolRelays is a helper method to define mock.On call
//   - ctx context.Context
//   - PoolID string
func (_e *MockClient_Expecter) GetPoolRelays(ctx interface{}, PoolID interface{}) *MockClient_GetPoolRelays_Call {
	return &MockClient_GetPoolRelays_Call{Call: _e.mock.On("GetPoolRelays", ctx, PoolID)}
}

func (_c *MockClient_GetPoolRelays_Call) Run(run func(ctx context.Context, PoolID string)) *MockClient_GetPoolRelays_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockClient_GetPoolRelays_Call) Return(_a0 []blockfrost_go.PoolRelay, _a1 error) *MockClient_GetPoolRelays_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClient_GetPoolRelays_Call) RunAndReturn(run func(context.Context, string) ([]blockfrost_go.PoolRelay, error)) *MockClient_GetPoolRelays_Call {
	_c.Call.Return(run)
	return _c
}

// Health provides a mock function with given fields: ctx
func (_m *MockClient) Health(ctx context.Context) (blockfrost_go.Health, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Health")
	}

	var r0 blockfrost_go.Health
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (blockfrost_go.Health, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) blockfrost_go.Health); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(blockfrost_go.Health)
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClient_Health_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Health'
type MockClient_Health_Call struct {
	*mock.Call
}

// Health is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockClient_Expecter) Health(ctx interface{}) *MockClient_Health_Call {
	return &MockClient_Health_Call{Call: _e.mock.On("Health", ctx)}
}

func (_c *MockClient_Health_Call) Run(run func(ctx context.Context)) *MockClient_Health_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockClient_Health_Call) Return(_a0 blockfrost_go.Health, _a1 error) *MockClient_Health_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClient_Health_Call) RunAndReturn(run func(context.Context) (blockfrost_go.Health, error)) *MockClient_Health_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockClient creates a new instance of MockClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockClient {
	mock := &MockClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
