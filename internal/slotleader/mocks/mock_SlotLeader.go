// Code generated by mockery v2.43.0. DO NOT EDIT.

package slotleader

import (
	context "context"

	blockfrost "github.com/blockfrost/blockfrost-go"

	mock "github.com/stretchr/testify/mock"

	slotleader "github.com/kilnfi/cardano-validator-watcher/internal/slotleader"
)

// MockSlotLeader is an autogenerated mock type for the SlotLeader type
type MockSlotLeader struct {
	mock.Mock
}

type MockSlotLeader_Expecter struct {
	mock *mock.Mock
}

func (_m *MockSlotLeader) EXPECT() *MockSlotLeader_Expecter {
	return &MockSlotLeader_Expecter{mock: &_m.Mock}
}

// GetNextSlotLeader provides a mock function with given fields: ctx, PoolID, height, epoch
func (_m *MockSlotLeader) GetNextSlotLeader(ctx context.Context, PoolID string, height int, epoch int) (int, error) {
	ret := _m.Called(ctx, PoolID, height, epoch)

	if len(ret) == 0 {
		panic("no return value specified for GetNextSlotLeader")
	}

	var r0 int
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, int, int) (int, error)); ok {
		return rf(ctx, PoolID, height, epoch)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, int, int) int); ok {
		r0 = rf(ctx, PoolID, height, epoch)
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, int, int) error); ok {
		r1 = rf(ctx, PoolID, height, epoch)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockSlotLeader_GetNextSlotLeader_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetNextSlotLeader'
type MockSlotLeader_GetNextSlotLeader_Call struct {
	*mock.Call
}

// GetNextSlotLeader is a helper method to define mock.On call
//   - ctx context.Context
//   - PoolID string
//   - height int
//   - epoch int
func (_e *MockSlotLeader_Expecter) GetNextSlotLeader(ctx interface{}, PoolID interface{}, height interface{}, epoch interface{}) *MockSlotLeader_GetNextSlotLeader_Call {
	return &MockSlotLeader_GetNextSlotLeader_Call{Call: _e.mock.On("GetNextSlotLeader", ctx, PoolID, height, epoch)}
}

func (_c *MockSlotLeader_GetNextSlotLeader_Call) Run(run func(ctx context.Context, PoolID string, height int, epoch int)) *MockSlotLeader_GetNextSlotLeader_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(int), args[3].(int))
	})
	return _c
}

func (_c *MockSlotLeader_GetNextSlotLeader_Call) Return(_a0 int, _a1 error) *MockSlotLeader_GetNextSlotLeader_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockSlotLeader_GetNextSlotLeader_Call) RunAndReturn(run func(context.Context, string, int, int) (int, error)) *MockSlotLeader_GetNextSlotLeader_Call {
	_c.Call.Return(run)
	return _c
}

// GetSlotLeaders provides a mock function with given fields: ctx, PoolID, epoch
func (_m *MockSlotLeader) GetSlotLeaders(ctx context.Context, PoolID string, epoch int) (slotleader.Schedule, error) {
	ret := _m.Called(ctx, PoolID, epoch)

	if len(ret) == 0 {
		panic("no return value specified for GetSlotLeaders")
	}

	var r0 slotleader.Schedule
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, int) (slotleader.Schedule, error)); ok {
		return rf(ctx, PoolID, epoch)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, int) slotleader.Schedule); ok {
		r0 = rf(ctx, PoolID, epoch)
	} else {
		r0 = ret.Get(0).(slotleader.Schedule)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, int) error); ok {
		r1 = rf(ctx, PoolID, epoch)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockSlotLeader_GetSlotLeaders_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetSlotLeaders'
type MockSlotLeader_GetSlotLeaders_Call struct {
	*mock.Call
}

// GetSlotLeaders is a helper method to define mock.On call
//   - ctx context.Context
//   - PoolID string
//   - epoch int
func (_e *MockSlotLeader_Expecter) GetSlotLeaders(ctx interface{}, PoolID interface{}, epoch interface{}) *MockSlotLeader_GetSlotLeaders_Call {
	return &MockSlotLeader_GetSlotLeaders_Call{Call: _e.mock.On("GetSlotLeaders", ctx, PoolID, epoch)}
}

func (_c *MockSlotLeader_GetSlotLeaders_Call) Run(run func(ctx context.Context, PoolID string, epoch int)) *MockSlotLeader_GetSlotLeaders_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(int))
	})
	return _c
}

func (_c *MockSlotLeader_GetSlotLeaders_Call) Return(_a0 slotleader.Schedule, _a1 error) *MockSlotLeader_GetSlotLeaders_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockSlotLeader_GetSlotLeaders_Call) RunAndReturn(run func(context.Context, string, int) (slotleader.Schedule, error)) *MockSlotLeader_GetSlotLeaders_Call {
	_c.Call.Return(run)
	return _c
}

// IsSlotLeader provides a mock function with given fields: ctx, PoolID, slot, epoch
func (_m *MockSlotLeader) IsSlotLeader(ctx context.Context, PoolID string, slot int, epoch int) (bool, error) {
	ret := _m.Called(ctx, PoolID, slot, epoch)

	if len(ret) == 0 {
		panic("no return value specified for IsSlotLeader")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, int, int) (bool, error)); ok {
		return rf(ctx, PoolID, slot, epoch)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, int, int) bool); ok {
		r0 = rf(ctx, PoolID, slot, epoch)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, int, int) error); ok {
		r1 = rf(ctx, PoolID, slot, epoch)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockSlotLeader_IsSlotLeader_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsSlotLeader'
type MockSlotLeader_IsSlotLeader_Call struct {
	*mock.Call
}

// IsSlotLeader is a helper method to define mock.On call
//   - ctx context.Context
//   - PoolID string
//   - slot int
//   - epoch int
func (_e *MockSlotLeader_Expecter) IsSlotLeader(ctx interface{}, PoolID interface{}, slot interface{}, epoch interface{}) *MockSlotLeader_IsSlotLeader_Call {
	return &MockSlotLeader_IsSlotLeader_Call{Call: _e.mock.On("IsSlotLeader", ctx, PoolID, slot, epoch)}
}

func (_c *MockSlotLeader_IsSlotLeader_Call) Run(run func(ctx context.Context, PoolID string, slot int, epoch int)) *MockSlotLeader_IsSlotLeader_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(int), args[3].(int))
	})
	return _c
}

func (_c *MockSlotLeader_IsSlotLeader_Call) Return(_a0 bool, _a1 error) *MockSlotLeader_IsSlotLeader_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockSlotLeader_IsSlotLeader_Call) RunAndReturn(run func(context.Context, string, int, int) (bool, error)) *MockSlotLeader_IsSlotLeader_Call {
	_c.Call.Return(run)
	return _c
}

// IsSlotsEmpty provides a mock function with given fields: ctx, PoolID, epoch
func (_m *MockSlotLeader) IsSlotsEmpty(ctx context.Context, PoolID string, epoch int) (bool, error) {
	ret := _m.Called(ctx, PoolID, epoch)

	if len(ret) == 0 {
		panic("no return value specified for IsSlotsEmpty")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, int) (bool, error)); ok {
		return rf(ctx, PoolID, epoch)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, int) bool); ok {
		r0 = rf(ctx, PoolID, epoch)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, int) error); ok {
		r1 = rf(ctx, PoolID, epoch)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockSlotLeader_IsSlotsEmpty_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsSlotsEmpty'
type MockSlotLeader_IsSlotsEmpty_Call struct {
	*mock.Call
}

// IsSlotsEmpty is a helper method to define mock.On call
//   - ctx context.Context
//   - PoolID string
//   - epoch int
func (_e *MockSlotLeader_Expecter) IsSlotsEmpty(ctx interface{}, PoolID interface{}, epoch interface{}) *MockSlotLeader_IsSlotsEmpty_Call {
	return &MockSlotLeader_IsSlotsEmpty_Call{Call: _e.mock.On("IsSlotsEmpty", ctx, PoolID, epoch)}
}

func (_c *MockSlotLeader_IsSlotsEmpty_Call) Run(run func(ctx context.Context, PoolID string, epoch int)) *MockSlotLeader_IsSlotsEmpty_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(int))
	})
	return _c
}

func (_c *MockSlotLeader_IsSlotsEmpty_Call) Return(_a0 bool, _a1 error) *MockSlotLeader_IsSlotsEmpty_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockSlotLeader_IsSlotsEmpty_Call) RunAndReturn(run func(context.Context, string, int) (bool, error)) *MockSlotLeader_IsSlotsEmpty_Call {
	_c.Call.Return(run)
	return _c
}

// Refresh provides a mock function with given fields: ctx, epoch
func (_m *MockSlotLeader) Refresh(ctx context.Context, epoch blockfrost.Epoch) error {
	ret := _m.Called(ctx, epoch)

	if len(ret) == 0 {
		panic("no return value specified for Refresh")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, blockfrost.Epoch) error); ok {
		r0 = rf(ctx, epoch)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockSlotLeader_Refresh_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Refresh'
type MockSlotLeader_Refresh_Call struct {
	*mock.Call
}

// Refresh is a helper method to define mock.On call
//   - ctx context.Context
//   - epoch blockfrost.Epoch
func (_e *MockSlotLeader_Expecter) Refresh(ctx interface{}, epoch interface{}) *MockSlotLeader_Refresh_Call {
	return &MockSlotLeader_Refresh_Call{Call: _e.mock.On("Refresh", ctx, epoch)}
}

func (_c *MockSlotLeader_Refresh_Call) Run(run func(ctx context.Context, epoch blockfrost.Epoch)) *MockSlotLeader_Refresh_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(blockfrost.Epoch))
	})
	return _c
}

func (_c *MockSlotLeader_Refresh_Call) Return(_a0 error) *MockSlotLeader_Refresh_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockSlotLeader_Refresh_Call) RunAndReturn(run func(context.Context, blockfrost.Epoch) error) *MockSlotLeader_Refresh_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockSlotLeader creates a new instance of MockSlotLeader. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockSlotLeader(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockSlotLeader {
	mock := &MockSlotLeader{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
