// Code generated by mockery v2.53.2. DO NOT EDIT.

package cardano

import (
	context "context"

	cardano "github.com/kilnfi/cardano-validator-watcher/internal/cardano"

	mock "github.com/stretchr/testify/mock"

	pools "github.com/kilnfi/cardano-validator-watcher/internal/pools"
)

// MockCardanoClient is an autogenerated mock type for the CardanoClient type
type MockCardanoClient struct {
	mock.Mock
}

type MockCardanoClient_Expecter struct {
	mock *mock.Mock
}

func (_m *MockCardanoClient) EXPECT() *MockCardanoClient_Expecter {
	return &MockCardanoClient_Expecter{mock: &_m.Mock}
}

// LeaderLogs provides a mock function with given fields: ctx, ledgetSet, epochNonce, pool
func (_m *MockCardanoClient) LeaderLogs(ctx context.Context, ledgetSet string, epochNonce string, pool pools.Pool) error {
	ret := _m.Called(ctx, ledgetSet, epochNonce, pool)

	if len(ret) == 0 {
		panic("no return value specified for LeaderLogs")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, pools.Pool) error); ok {
		r0 = rf(ctx, ledgetSet, epochNonce, pool)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockCardanoClient_LeaderLogs_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'LeaderLogs'
type MockCardanoClient_LeaderLogs_Call struct {
	*mock.Call
}

// LeaderLogs is a helper method to define mock.On call
//   - ctx context.Context
//   - ledgetSet string
//   - epochNonce string
//   - pool pools.Pool
func (_e *MockCardanoClient_Expecter) LeaderLogs(ctx interface{}, ledgetSet interface{}, epochNonce interface{}, pool interface{}) *MockCardanoClient_LeaderLogs_Call {
	return &MockCardanoClient_LeaderLogs_Call{Call: _e.mock.On("LeaderLogs", ctx, ledgetSet, epochNonce, pool)}
}

func (_c *MockCardanoClient_LeaderLogs_Call) Run(run func(ctx context.Context, ledgetSet string, epochNonce string, pool pools.Pool)) *MockCardanoClient_LeaderLogs_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(pools.Pool))
	})
	return _c
}

func (_c *MockCardanoClient_LeaderLogs_Call) Return(_a0 error) *MockCardanoClient_LeaderLogs_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockCardanoClient_LeaderLogs_Call) RunAndReturn(run func(context.Context, string, string, pools.Pool) error) *MockCardanoClient_LeaderLogs_Call {
	_c.Call.Return(run)
	return _c
}

// Ping provides a mock function with given fields: ctx
func (_m *MockCardanoClient) Ping(ctx context.Context) error {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Ping")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockCardanoClient_Ping_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Ping'
type MockCardanoClient_Ping_Call struct {
	*mock.Call
}

// Ping is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockCardanoClient_Expecter) Ping(ctx interface{}) *MockCardanoClient_Ping_Call {
	return &MockCardanoClient_Ping_Call{Call: _e.mock.On("Ping", ctx)}
}

func (_c *MockCardanoClient_Ping_Call) Run(run func(ctx context.Context)) *MockCardanoClient_Ping_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockCardanoClient_Ping_Call) Return(_a0 error) *MockCardanoClient_Ping_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockCardanoClient_Ping_Call) RunAndReturn(run func(context.Context) error) *MockCardanoClient_Ping_Call {
	_c.Call.Return(run)
	return _c
}

// StakeSnapshot provides a mock function with given fields: ctx, PoolID
func (_m *MockCardanoClient) StakeSnapshot(ctx context.Context, PoolID string) (cardano.ClientQueryStakeSnapshotResponse, error) {
	ret := _m.Called(ctx, PoolID)

	if len(ret) == 0 {
		panic("no return value specified for StakeSnapshot")
	}

	var r0 cardano.ClientQueryStakeSnapshotResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (cardano.ClientQueryStakeSnapshotResponse, error)); ok {
		return rf(ctx, PoolID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) cardano.ClientQueryStakeSnapshotResponse); ok {
		r0 = rf(ctx, PoolID)
	} else {
		r0 = ret.Get(0).(cardano.ClientQueryStakeSnapshotResponse)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, PoolID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockCardanoClient_StakeSnapshot_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'StakeSnapshot'
type MockCardanoClient_StakeSnapshot_Call struct {
	*mock.Call
}

// StakeSnapshot is a helper method to define mock.On call
//   - ctx context.Context
//   - PoolID string
func (_e *MockCardanoClient_Expecter) StakeSnapshot(ctx interface{}, PoolID interface{}) *MockCardanoClient_StakeSnapshot_Call {
	return &MockCardanoClient_StakeSnapshot_Call{Call: _e.mock.On("StakeSnapshot", ctx, PoolID)}
}

func (_c *MockCardanoClient_StakeSnapshot_Call) Run(run func(ctx context.Context, PoolID string)) *MockCardanoClient_StakeSnapshot_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockCardanoClient_StakeSnapshot_Call) Return(_a0 cardano.ClientQueryStakeSnapshotResponse, _a1 error) *MockCardanoClient_StakeSnapshot_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockCardanoClient_StakeSnapshot_Call) RunAndReturn(run func(context.Context, string) (cardano.ClientQueryStakeSnapshotResponse, error)) *MockCardanoClient_StakeSnapshot_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockCardanoClient creates a new instance of MockCardanoClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockCardanoClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockCardanoClient {
	mock := &MockCardanoClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
